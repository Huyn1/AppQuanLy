import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
} from 'react-native';

const tabs = ['T·∫•t c·∫£', 'T·∫ßng 2', 'T·∫ßng 10', 'VIP'];

const data = {
  'T·∫ßng 2': [
    { name: 'EDITTED NAME', time: '1 th√°ng 4 ng√†y', price: 0, printer: true },
    { name: 'PH√íNG A', time: '2 ng√†y 19 gi·ªù', price: 50000 },
    { name: 'TEST PH√íNG M...', time: '6 ng√†y 15 gi·ªù', price: 50000 },
    { name: 'TEST PH√íNG...', time: '2 th√°ng 1 ng√†y', price: 75000, printer: true },
  ],
  'T·∫ßng 10': [
    { name: 'PH√íNG T·∫¶NG 10', time: '2 th√°ng 5 ng√†y', price: 295000 },
    { name: 'PH√íNG VVIP' },
    { name: 'PH√íNG B', time: '4 ng√†y', price: 33000 },
    { name: 'PH√íNG B 2', time: '2 ng√†y 19 gi·ªù', price: 325000 },
    { name: 'PH√íNG B 4', time: '1 th√°ng 6 ng√†y', price: 99000 },
  ],
  VIP: [
    { name: 'PH√íNG B√ÄN VIP' },
    { name: 'B√ÄN VIP 1', time: '1 th√°ng 4 ng√†y', price: 11301104 },
    { name: 'B√ÄN VIP 2', time: '3 ng√†y 10 gi·ªù', price: 50000, printer: true },
  ],
};

const RoomItem = ({ room }) => {
  const isEmpty = !room.time;
  const containerStyle = [
    styles.roomCard,
    isEmpty
      ? styles.emptyRoom
      : room.printer
      ? styles.greenRoom
      : styles.blueRoom,
  ];

  return (
    <View style={containerStyle}>
      <Text style={styles.roomName}>{room.name}</Text>
      {!isEmpty ? (
        <>
          <Text style={styles.roomText}>üïí {room.time}</Text>
          <Text style={styles.roomText}>üíµ {room.price.toLocaleString()}</Text>
          {room.printer && <Text style={styles.roomText}>üñ® C√≥ m√°y in</Text>}
        </>
      ) : (
        <Text style={styles.roomText}>S·∫µn s√†ng</Text>
      )}
    </View>
  );
};

const Home = () => {
  const [currentTab, setCurrentTab] = useState('T·∫•t c·∫£');

  const roomsToDisplay =
    currentTab === 'T·∫•t c·∫£'
      ? Object.entries(data).flatMap(([floor, rooms]) =>
          rooms.map(room => ({ ...room, section: floor })),
        )
      : data[currentTab]?.map(room => ({ ...room, section: currentTab }));

  const renderHeader = () => (
    <View>
      {/* Header */}
      <View style={styles.header}>
        <View>
          <Text style={styles.money}>üí∞ T·∫°m t√≠nh: 15,571,365.25</Text>
          <Text style={styles.inUse}>‚òï ƒêang d√πng: 20/88</Text>
        </View>
        <TouchableOpacity style={styles.filterBtn}>
          <Text style={styles.filterText}>L·ªçc</Text>
        </TouchableOpacity>
      </View>

      {/* Tabs */}
      <View style={styles.tabContainer}>
        {tabs.map(tab => (
          <TouchableOpacity
            key={tab}
            onPress={() => setCurrentTab(tab)}
            style={[
              styles.tab,
              currentTab === tab && styles.tabSelected,
            ]}>
            <Text
              style={[
                styles.tabText,
                currentTab === tab && styles.tabTextSelected,
              ]}>
              {tab}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );

  return (
    <FlatList
      data={roomsToDisplay}
      keyExtractor={(item, index) => item.name + index}
      numColumns={2}
      columnWrapperStyle={styles.row}
      contentContainerStyle={styles.listContent}
      ListHeaderComponent={renderHeader}
      renderItem={({ item }) => <RoomItem room={item} />}
    />
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#fff' },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 12,
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingTop: 16,
  },
  money: { color: '#f97316', fontWeight: 'bold', marginBottom: 4 },
  inUse: { color: '#f97316', fontWeight: 'bold' },
  filterBtn: {
    backgroundColor: '#3b82f6',
    borderRadius: 999,
    paddingVertical: 6,
    paddingHorizontal: 12,
  },
  filterText: { color: 'white', fontWeight: 'bold' },

  tabContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
    paddingHorizontal: 16,
  },
  tab: {
    paddingVertical: 6,
    paddingHorizontal: 12,
    backgroundColor: '#e5e7eb',
    borderRadius: 999,
    marginRight: 8,
    marginBottom: 8,
  },
  tabSelected: { backgroundColor: '#3b82f6' },
  tabText: { fontWeight: '600', color: '#000' },
  tabTextSelected: { color: '#fff' },

  listContent: { paddingBottom: 100, paddingHorizontal: 16 },
  row: { justifyContent: 'space-between', marginBottom: 12 },

  roomCard: {
    flex: 1,
    borderRadius: 12,
    padding: 10,
    marginHorizontal: 4,
    minHeight: 100,
    justifyContent: 'center',
  },
  roomName: { fontWeight: 'bold', fontSize: 14, marginBottom: 4, color: '#fff' },
  roomText: { fontSize: 12, color: '#fff' },

  blueRoom: { backgroundColor: '#3b82f6' },
  greenRoom: { backgroundColor: '#22c55e' },
  emptyRoom: {
    borderWidth: 1,
    borderColor: '#d1d5db',
    backgroundColor: '#fff',
  },
});

export default Home;
